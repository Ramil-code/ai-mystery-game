AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Serverless application for generating and managing AWS service images.

Parameters:
  BucketName:
    Type: String
    Default: my-default-bucket-name

  DynamoTableName:
    Type: String
    Default: my-default-dynamo-table

  StageName:
    Type: String
    Default: Prod

  MemorySize:
    Type: Number
    Default: 3008

  Timeout:
    Type: Number
    Default: 30

  SSMParameterName:
    Type: String

Resources:
  #
  # S3 bucket (без CORS)
  #
  Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref BucketName
      WebsiteConfiguration:
        IndexDocument: index.html

  #
  # Основной API c вшитым CORS от SAM
  #
  Api:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub "${AWS::StackName}-Api"
      StageName: !Ref StageName
      Cors:
        AllowMethods: "'GET,POST,OPTIONS'"
        AllowHeaders: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
        AllowOrigin: "'*'"

  #
  # Lambda: ListImagesFunction
  #
  ListImagesFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: List images from the S3 bucket
      CodeUri: REPLACE-BY-URI-FOR-ListImages.zip
      Handler: lambda_function.lambda_handler
      Runtime: python3.12
      MemorySize: 128
      Timeout: 15
      Environment:
        Variables:
          BUCKET_NAME: !Ref BucketName
          FOLDER_NAME: photos/
      Events:
        ListImagesApi:
          Type: Api
          Properties:
            Path: /list-images
            Method: GET
            RestApiId: !Ref Api
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - s3:GetObject
                - s3:ListBucket
              Resource:
                - !Sub arn:${AWS::Partition}:s3:::${BucketName}
                - !Sub arn:${AWS::Partition}:s3:::${BucketName}/*

  #
  # Lambda: GetDescriptionFunction
  #
  GetDescriptionFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: Lambda function to get details from DynamoDB and S3
      CodeUri: REPLACE-BY-URI-FOR-GetDescription.zip
      Handler: lambda_function.lambda_handler
      Runtime: python3.12
      MemorySize: 128
      Timeout: 30
      Environment:
        Variables:
          DYNAMOTABLE_NAME: !Ref DynamoTableName
          BUCKET_NAME: !Ref BucketName
          API_KEY_PARAM: !Ref SSMParameterName
          FOLDER_NAME: photos/
          HTML_FILE_KEY: index.html
      Events:
        GetDescriptionApi:
          Type: Api
          Properties:
            Path: /get-description
            Method: POST
            RestApiId: !Ref Api
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - s3:PutObject
                - s3:DeleteObject
                - s3:GetObject
                - s3:ListBucket
              Resource:
                - !Sub arn:${AWS::Partition}:s3:::${BucketName}
                - !Sub arn:${AWS::Partition}:s3:::${BucketName}/*
        - DynamoDBCrudPolicy:
            TableName: !Ref DynamoTableName
        - Statement:
            - Effect: Allow
              Action:
                - ssm:GetParameter
              Resource:
                - !Sub arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${SSMParameterName}

  #
  # Lambda: GetImageFunction
  #
  GetImageFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: Lambda function to process images
      CodeUri: REPLACE-BY-URI-FOR-GetImage.zip
      Handler: lambda_function.lambda_handler
      Runtime: python3.12
      MemorySize: 128
      Timeout: 30
      Environment:
        Variables:
          BUCKET_NAME: !Ref BucketName
          DYNAMOTABLE_NAME: !Ref DynamoTableName
          FOLDER_NAME: photos/
          API_KEY_PARAM: !Ref SSMParameterName
      Events:
        ProcessApi:
          Type: Api
          Properties:
            Path: /process
            Method: POST
            RestApiId: !Ref Api
        DynamoDBTrigger:
          Type: DynamoDB
          Properties:
            Stream: !GetAtt DynamoTable.StreamArn
            StartingPosition: LATEST
            BatchSize: 1
            MaximumRetryAttempts: 3
            Enabled: True
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - s3:ListBucket
                - s3:GetObject
                - s3:PutObject
                - s3:DeleteObject
              Resource:
                - !Sub arn:${AWS::Partition}:s3:::${BucketName}
                - !Sub arn:${AWS::Partition}:s3:::${BucketName}/*
        - DynamoDBCrudPolicy:
            TableName: !Ref DynamoTableName
        - Statement:
            - Effect: Allow
              Action:
                - ssm:GetParameter
              Resource:
                - !Sub arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${SSMParameterName}
        - Statement:
            - Effect: Allow
              Action:
                - dynamodb:DescribeStream
                - dynamodb:GetRecords
                - dynamodb:GetShardIterator
                - dynamodb:ListStreams
              Resource: !GetAtt DynamoTable.StreamArn        

  DynamoTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Ref DynamoTableName
      AttributeDefinitions:
        - AttributeName: Situation_id
          AttributeType: 'N'
      BillingMode: PAY_PER_REQUEST
      KeySchema:
        - AttributeName: Situation_id
          KeyType: HASH
      StreamSpecification:
        StreamViewType: NEW_IMAGE
